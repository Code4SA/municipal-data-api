version: "3"

services:
  scorecard:
    build:
      context: .
      dockerfile: Dockerfile-dev
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - ".:/app"
    environment:
      - DATABASE_URL=postgres://municipal_finance:municipal_finance@postgres/municipal_finance
      - DJANGO_SECRET_KEY=not-so-secret
      - SITE_ID=2
      - API_URL=http://portal:8000/api
      - AWS_ACCESS_KEY_ID=minio-access-key
      - AWS_SECRET_ACCESS_KEY=minio-secret-key
      - AWS_STORAGE_BUCKET_NAME=municipal-money
      - AWS_S3_ENDPOINT_URL=http://minio:9000
      - AWS_S3_SECURE_URLS=True
      - AWS_S3_CUSTOM_DOMAIN
    ports:
      - "8001:8000"
    working_dir: /app
    depends_on:
      - postgres
      - portal
      - worker
      - minio-client
      - minio
    stdin_open: true
    tty: true

  postgres:
    image: postgres:11.5
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=municipal_finance
      - POSTGRES_USER=municipal_finance
      - POSTGRES_PASS=municipal_finance

  portal:
    build:
      context: .
      dockerfile: Dockerfile-dev
    command: gunicorn --limit-request-line 7168 --worker-class gevent municipal_finance.wsgi:application -t 600 --log-file - -b 0.0.0.0:8000
    # command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - ".:/app"
    environment:
      - DATABASE_URL=postgres://municipal_finance@postgres/municipal_finance
      - DJANGO_SECRET_KEY=not-so-secret
      - SITE_ID=3
      - PRELOAD_CUBES=true
      - API_URL=http://portal:8000/api
      - AWS_ACCESS_KEY_ID=minio-access-key
      - AWS_SECRET_ACCESS_KEY=minio-secret-key
      - AWS_STORAGE_BUCKET_NAME=municipal-money
      - AWS_S3_ENDPOINT_URL=http://minio:9000
      - AWS_S3_SECURE_URLS=True
      - AWS_S3_CUSTOM_DOMAIN
    working_dir: /app
    ports:
      - "8002:8000"
    depends_on:
      - postgres
      - minio

  worker:
    build:
      context: .
      dockerfile: Dockerfile-dev
    command: python manage.py qcluster
    volumes:
      - ".:/app"
    environment:
      - DATABASE_URL=postgres://municipal_finance@postgres/municipal_finance
      - DJANGO_SECRET_KEY=not-so-secret
      - SITE_ID=2
      - PRELOAD_CUBES=true
      - API_URL=http://portal:8000/api
      - AWS_ACCESS_KEY_ID=minio-access-key
      - AWS_SECRET_ACCESS_KEY=minio-secret-key
      - AWS_STORAGE_BUCKET_NAME=municipal-money
      - AWS_S3_ENDPOINT_URL=http://minio:9000
      - AWS_S3_SECURE_URLS=True
      - AWS_S3_CUSTOM_DOMAIN
    working_dir: /app
    depends_on:
      - postgres
      - minio
    restart: on-failure

  minio:
    image: "minio/minio:RELEASE.2019-10-12T01-39-57Z"
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
    environment:
      - MINIO_ACCESS_KEY=minio-access-key
      - MINIO_SECRET_KEY=minio-secret-key
      - MINIO_DOMAIN=minio
    command: minio --compat server data

  minio-client:
    image: "minio/mc:RELEASE.2019-12-17T23-26-28Z"
    depends_on:
      - minio
    environment:
      - MINIO_ACCESS_KEY=minio-access-key
      - MINIO_SECRET_KEY=minio-secret-key
      - MINIO_DOMAIN=minio
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host add --quiet --api s3v4 local http://minio:9000 minio-access-key minio-secret-key;
      /usr/bin/mc mb  local/municipal-money;
      /usr/bin/mc policy set public local/municipal-money;
      "

volumes:
  minio_data: {}
  postgres_data: {}
  munimoney_search: {}
  esdata:
    driver: local
